#!/usr/bin/env python3
import argparse
import matplotlib.pyplot as plt
import numpy as np
import json
import math
import subprocess
import tinytag
import statistics
import operator

parser = argparse.ArgumentParser()
parser.add_argument("level")
parser.add_argument("--window-beats", type=int, default=16,
                    help="Number of beats worth of song to include in each rate computation. Defaults to 16.")
parser.add_argument("filename", nargs="?", default=None)
args = parser.parse_args()

if args.window_beats < 1:
    print("Window beat length must be positive.")
    exit(1)

info_filename = "info.json"

with open(info_filename) as info_file:
    info = json.load(info_file)

difficulties = list()
levelPath = None
duration = None
offset = None
for level in info["difficultyLevels"]:
    difficulty = level["difficulty"]
    if difficulty == args.level:
        levelPath = level["jsonPath"]
        duration = math.floor(tinytag.TinyTag.get(level["audioPath"]).duration)
        offset = level["offset"]
        break

    difficulties.append(difficulty)
else:
    print("Could not find difficulty level '{}'.".format(args.level))
    print("Found these difficulties: {}".format(difficulties))
    exit(1)

assert levelPath is not None
assert duration is not None
with open(levelPath) as levelFile:
    level = json.load(levelFile)

# TODO: This is shared with build-package; move to a module.
try:
    tag = subprocess.check_output(["git", "describe"]).decode("utf8").rstrip()
except (subprocess.CalledProcessError, FileNotFoundError) as e:
    print("Warning: failed to get description from git: {}".format(e))
    tag = ""

map_description = "{info[songName]} - {info[songSubName]} {difficulty} {tag} by {info[authorName]}".format(
    info=info,
    difficulty=args.level,
    tag=tag,
)
bpm = int(level["_beatsPerMinute"])

window_duration = args.window_beats

def beats_to_seconds(beat_count):
    # Beat   Minute   60 seconds
    # ---- * ------ * ---------- = seconds
    #        Beats    1 minute
    return beat_count / bpm * 60

def seconds_to_beats(seconds):
    # Beat   Minute   60 seconds
    # ---- * ------ * ---------- = seconds
    #        Beats    1 minute
    return seconds / 60 * bpm

# Get the position left/right - up/down position of a note.
def get_pos(note):
    return (note["_lineIndex"], note["_lineLayer"])

# Get the normalized direction of a cut, given the cutDirection number
def get_direction(cutDirection):
    return [(0, 1),
            (0, -1),
            (-1, 0),
            (1, 0),
            (-1/math.sqrt(2), 1/math.sqrt(2)),
            (1/math.sqrt(2), 1/math.sqrt(2)),
            (-1/math.sqrt(2), -1/math.sqrt(2)),
            (1/math.sqrt(2), -1/math.sqrt(2)),
            (0, 0),
            ][cutDirection]

# Get the distance between two coordinates
def distance(a, b):
    return math.sqrt(math.pow(a[0] - b[0], 2) + math.pow(a[1] - b[1], 2))

# Get the position that is dist away from pos in the direction of cutDirection
def move(pos, dist, cutDirection):
    direction = get_direction(cutDirection)
    return (pos[0] + direction[0] * dist, pos[1] + direction[1] * dist)

# Track the movement of each hand (0 = left, 1 = right)
def get_hand_movement(hand):
    movement = []
    if hand == 0:
        last_pos = (1, 0) # The left hand starts here
    else:
        last_pos = (2, 0) # The right hand starts here
    for note in sorted(level["_notes"], key=lambda x : x["_time"]):
        if hand != note["_type"]:
            continue
        note_beat = note["_time"]
        pos = get_pos(note)
        before_pos = move(pos, -0.5, note["_cutDirection"]) # you have to start hitting before the block
        after_pos = move(pos, 0.5, note["_cutDirection"]) # you have to end hitting after the block

        moved = distance(last_pos, before_pos) + distance(before_pos, after_pos)
        movement.append((note_beat, moved))

        last_pos = after_pos

    return movement

# Track where all the notes are
def get_note_count():
    counts = []
    for note in level["_notes"]:
        note_beat = note["_time"]
        counts.append((note_beat, 1))

    return counts

# Sum all the values in data which are timestamped between start and start + window_duration
def get_window(data, start, window_duration):
    res = 0
    for event in data:
        if event[0] >= start and event[0] <= start + window_duration:
            res += event[1]
    return res

# Get all the windows of the requested length starting at every bar (using the correct offset)
def get_all_windows(data):
    windows = []
    for window_start in np.arange(seconds_to_beats(offset / 1000), seconds_to_beats(duration) - window_duration + 0.0001): # Shift is needed so we fully count the last bars
        windows.append(get_window(data, window_start, window_duration) / beats_to_seconds(window_duration))
    return windows


note_counts = get_note_count()
note_rates = get_all_windows(note_counts)

plt.rcdefaults()

plt.plot(note_rates)

# OST notes per second as cited in Mediocre Mapper.
reference_bounds = {
    "Easy": ["0.9", "1.3"],
    "Normal": ["1.4", "1.8"],
    "Hard": ["1.8", "2.7"],
    "Expert": ["2.4", "3.7"],
}

# Consolidate bounds to avoid overlapping labels.
bound_labels = dict()


def set_bound(bound, value):
    if value not in bound_labels:
        bound_labels[value] = list()

    bound_labels[value].append(bound)


for name, bounds in reference_bounds.items():
    lower_bound, upper_bound = bounds

    set_bound("Lower {}".format(name), lower_bound)
    set_bound("Upper {}".format(name), upper_bound)

# Precision of 0.1 matches that of reference bounds.
y_ticks = np.arange(max(note_rates) + 0.1, step=0.1)
y_labels = list()
for tick in y_ticks:
    tick_label = "{:.1f}".format(tick)
    if tick_label in bound_labels:
        y_labels.append("{} {}".format(bound_labels[tick_label], tick_label))
    else:
        y_labels.append(tick_label)

plt.yticks(y_ticks, y_labels)
plt.ylabel("Notes per second")

# Add room for the long y axis labels.
plt.subplots_adjust(left=0.2)

# Add 10 labels throughout the duration.
x_ticks = np.arange(seconds_to_beats(offset / 1000), seconds_to_beats(duration) - window_duration + 0.0001, step=seconds_to_beats(duration) / 10)
x_labels = list()


def format_duration(beats):
    seconds = beats_to_seconds(beats)
    return "{min}:{sec:02}".format(
        min=math.floor(seconds // 60),
        sec=int(seconds % 60),
    )


for tick in x_ticks:
    x_labels.append(format_duration(tick))

plt.xticks(x_ticks, x_labels)
plt.xlabel("Time")

plt.suptitle("Note rate in {}".format(map_description))
# TODO: Better formatted as something other than a title?
plt.title("Overall average {:.2f} notes per second".format(len(note_counts) / duration))

median_rate = statistics.median(note_rates)
plt.figtext(0.05, 0.9, "Median: {:.2f} n/s".format(median_rate))
plt.figtext(0.05, 0.92, "Window duration {} beats".format(args.window_beats))

maximum_x, maximum_y = max(enumerate(note_rates), key=operator.itemgetter(1))
plt.annotate("Max {:.2f} n/s at {}".format(maximum_y, format_duration(maximum_x)),
             (maximum_x, maximum_y))

dpi = 100
# pixels   inch
# ------ * ------ = inches
#          pixels
width = 1920 / dpi
height = 1080 / dpi
plt.gcf().set_size_inches(width, height)

filename = args.filename
if filename is None:
    filename = "Note rate for {}.png".format(map_description)

plt.savefig(filename, dpi=dpi)
